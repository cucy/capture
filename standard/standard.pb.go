// Code generated by protoc-gen-go. DO NOT EDIT.
// source: standard.proto

package standard

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 状态
type State int32

const (
	State_UNKNOWN                 State = 0
	State_SUCCESS                 State = 1
	State_FAILURE                 State = 2
	State_SERVICE_ERROR           State = 3
	State_PARAMS_INVALID          State = 4
	State_ILLEGAL_REQUEST         State = 5
	State_LABEL_NOT_EXIST         State = 6
	State_ARTICLE_NOT_EXIST       State = 7
	State_CATEGORY_NOT_EXIST      State = 8
	State_DB_OPERATION_FATLURE    State = 9
	State_LABEL_ALREADY_EXISTS    State = 10
	State_ARTICLE_ALREADY_EXISTS  State = 11
	State_CATEGORY_ALREADY_EXISTS State = 12
)

var State_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "SUCCESS",
	2:  "FAILURE",
	3:  "SERVICE_ERROR",
	4:  "PARAMS_INVALID",
	5:  "ILLEGAL_REQUEST",
	6:  "LABEL_NOT_EXIST",
	7:  "ARTICLE_NOT_EXIST",
	8:  "CATEGORY_NOT_EXIST",
	9:  "DB_OPERATION_FATLURE",
	10: "LABEL_ALREADY_EXISTS",
	11: "ARTICLE_ALREADY_EXISTS",
	12: "CATEGORY_ALREADY_EXISTS",
}

var State_value = map[string]int32{
	"UNKNOWN":                 0,
	"SUCCESS":                 1,
	"FAILURE":                 2,
	"SERVICE_ERROR":           3,
	"PARAMS_INVALID":          4,
	"ILLEGAL_REQUEST":         5,
	"LABEL_NOT_EXIST":         6,
	"ARTICLE_NOT_EXIST":       7,
	"CATEGORY_NOT_EXIST":      8,
	"DB_OPERATION_FATLURE":    9,
	"LABEL_ALREADY_EXISTS":    10,
	"ARTICLE_ALREADY_EXISTS":  11,
	"CATEGORY_ALREADY_EXISTS": 12,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}

func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0b3e239150a6a10f, []int{0}
}

func init() {
	proto.RegisterEnum("standard.State", State_name, State_value)
}

func init() { proto.RegisterFile("standard.proto", fileDescriptor_0b3e239150a6a10f) }

var fileDescriptor_0b3e239150a6a10f = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xcf, 0x4e, 0x02, 0x31,
	0x10, 0xc6, 0x15, 0xe5, 0xdf, 0xa0, 0x58, 0x46, 0x45, 0xa3, 0x6f, 0xe0, 0xc1, 0x83, 0x3e, 0xc1,
	0xd0, 0x1d, 0x48, 0x63, 0x6d, 0x71, 0xda, 0x45, 0x39, 0x35, 0x6b, 0xe0, 0x2a, 0x64, 0x5d, 0x9f,
	0xc6, 0x97, 0x35, 0x0b, 0xc1, 0x10, 0x8e, 0xdf, 0xef, 0x97, 0x99, 0x6f, 0x32, 0xd0, 0xff, 0xae,
	0x8a, 0xaf, 0x45, 0x51, 0x2e, 0x1e, 0xd7, 0xe5, 0xaa, 0x5a, 0x61, 0x67, 0x97, 0x1f, 0x7e, 0x1b,
	0xd0, 0x0c, 0x55, 0x51, 0x2d, 0xb1, 0x07, 0xed, 0xdc, 0xbd, 0x38, 0xff, 0xee, 0xd4, 0x51, 0x1d,
	0x42, 0xae, 0x35, 0x87, 0xa0, 0x8e, 0xeb, 0x30, 0x26, 0x63, 0x73, 0x61, 0xd5, 0xc0, 0x01, 0x9c,
	0x07, 0x96, 0x99, 0xd1, 0x9c, 0x58, 0xc4, 0x8b, 0x3a, 0x41, 0x84, 0xfe, 0x94, 0x84, 0x5e, 0x43,
	0x32, 0x6e, 0x46, 0xd6, 0x64, 0xea, 0x14, 0x2f, 0xe1, 0xc2, 0x58, 0xcb, 0x13, 0xb2, 0x49, 0xf8,
	0x2d, 0xe7, 0x10, 0x55, 0xb3, 0x86, 0x96, 0x46, 0x6c, 0x93, 0xf3, 0x31, 0xf1, 0x87, 0x09, 0x51,
	0xb5, 0xf0, 0x1a, 0x06, 0x24, 0xd1, 0x68, 0xcb, 0x7b, 0xb8, 0x8d, 0x43, 0x40, 0x4d, 0x91, 0x27,
	0x5e, 0xe6, 0x7b, 0xbc, 0x83, 0xb7, 0x70, 0x95, 0x8d, 0x92, 0x9f, 0xb2, 0x50, 0x34, 0xde, 0xa5,
	0x31, 0xc5, 0xcd, 0x65, 0xdd, 0xda, 0x6c, 0xb7, 0x93, 0x15, 0xa6, 0x6c, 0xbe, 0x1d, 0x09, 0x0a,
	0xf0, 0x0e, 0x86, 0xbb, 0x8a, 0x03, 0xd7, 0xc3, 0x7b, 0xb8, 0xf9, 0xef, 0x39, 0x90, 0x67, 0x4f,
	0x5d, 0x68, 0xeb, 0x62, 0x5d, 0xfd, 0x94, 0xcb, 0xcf, 0xd6, 0xe6, 0x73, 0xcf, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xe6, 0x47, 0x2f, 0xaa, 0x4b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CaptureClient is the client API for Capture service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CaptureClient interface {
}

type captureClient struct {
	cc *grpc.ClientConn
}

func NewCaptureClient(cc *grpc.ClientConn) CaptureClient {
	return &captureClient{cc}
}

// CaptureServer is the server API for Capture service.
type CaptureServer interface {
}

func RegisterCaptureServer(s *grpc.Server, srv CaptureServer) {
	s.RegisterService(&_Capture_serviceDesc, srv)
}

var _Capture_serviceDesc = grpc.ServiceDesc{
	ServiceName: "standard.Capture",
	HandlerType: (*CaptureServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "standard.proto",
}
